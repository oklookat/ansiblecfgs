---
- name: "ansiblecfgs: basic"
  hosts: all
  become: true

  handlers:
    - name: Reload nftables
      ansible.builtin.command: nft -f /etc/nftables.conf
      changed_when: false

  pre_tasks:
    - name: Ensure apt cache is updated
      apt:
        update_cache: yes
      changed_when: false

    - name: Fail if root password is not set
      fail:
        msg: "Variable new_root_password must be set!"
      when: new_root_password == ""

    - name: Fail if new user password is not set while user is defined
      fail:
        msg: "Variable new_user_password must be set if new_user_name is defined!"
      when: new_user_name != "" and new_user_password == ""

    - name: Check if SSH public key exists on control node
      stat:
        path: "{{ lookup('env','HOME') + '/.ssh/id_rsa.pub' }}"
      delegate_to: localhost
      become: false
      register: ssh_key_stat

    - name: Fail if SSH public key does not exist on control node
      fail:
        msg: "SSH public key '~/.ssh/id_rsa.pub' does not exist on control node."
      when: ssh_key_stat.stat.exists == false

  tasks:
    - name: Update Ubuntu APT mirror (if new_ubuntu_mirror is defined)
      ansible.builtin.replace:
        path: /etc/apt/sources.list.d/ubuntu.sources
        regexp: '^URIs:.*'
        replace: "URIs: {{ new_ubuntu_mirror }}"
      when:
        - new_ubuntu_mirror is defined
        - new_ubuntu_mirror | trim | length > 0

    - name: Upgrade all packages
      apt:
        upgrade: dist
      register: apt_upgrade
      until: apt_upgrade is succeeded
      retries: 10
      delay: 15

    - name: Gather installed packages
      ansible.builtin.package_facts:
        manager: auto

    - name: Patch NetworkManager config if installed
      when: "'network-manager' in ansible_facts.packages"
      block:
        - name: Ensure /etc/NetworkManager exists
          ansible.builtin.file:
            path: /etc/NetworkManager
            state: directory

        - name: Add unmanaged DNS settings
          ansible.builtin.lineinfile:
            path: /etc/NetworkManager/NetworkManager.conf
            insertafter: '^#?\[main\]'
            create: yes
            line: "{{ item }}"
          loop:
            - "dns=none"
            - "rc-manager=unmanaged"

    - name: Set static DNS to Cloudflare
      copy:
        dest: /etc/resolv.conf
        content: "nameserver 1.1.1.1\n"
        force: yes

    - name: Set root password
      user:
        name: root
        password: "{{ new_root_password | password_hash('sha512') }}"

    - name: Create new sudo user if defined
      when: new_user_name | length > 0 and new_user_password | length > 0
      block:
        - name: Create user
          user:
            name: "{{ new_user_name }}"
            password: "{{ new_user_password | password_hash('sha512') }}"
            groups: sudo
            shell: /bin/bash
            append: true

        - name: Add SSH key to user
          authorized_key:
            user: "{{ new_user_name }}"
            state: present
            key: "{{ lookup('file', lookup('env','HOME') + '/.ssh/id_rsa.pub') }}"
          when: ssh_key_stat.stat.exists

    - name: Stop and disable cloud-init service (if present)
      systemd:
        name: cloud-init
        state: stopped
        enabled: false
      when: "'cloud-init' in ansible_facts.packages"

    - name: Remove cloud-init SSH override config if exists
      file:
        path: /etc/ssh/sshd_config.d/50-cloud-init.conf
        state: absent
      when: "'cloud-init' in ansible_facts.packages"

    - name: Ensure /etc/ssh/sshd_config does not include any overrides
      lineinfile:
        path: /etc/ssh/sshd_config
        regexp: '^Include\s+/etc/ssh/sshd_config.d/.*'
        state: absent

    - name: Apply main sshd_config settings
      blockinfile:
        path: /etc/ssh/sshd_config
        block: |
          Port {{ new_ssh_port }}
          PermitRootLogin no
          PasswordAuthentication no
          PubkeyAuthentication yes
          PermitEmptyPasswords no
          X11Forwarding no

    - name: Remove UFW firewall if present
      block:
        - name: Disable UFW
          command: ufw disable
          register: ufw_disable
          ignore_errors: true
          changed_when: "'Firewall stopped and disabled on system startup' in ufw_disable.stderr"

        - name: Stop and disable UFW service
          service:
            name: ufw
            state: stopped
            enabled: false
          ignore_errors: true

        - name: Remove UFW
          package:
            name: ufw
            state: absent

    - name: Remove iptables and netfilter-persistent if present
      package:
        name:
          - iptables
          - iptables-persistent
          - netfilter-persistent
        state: absent

    - name: Install nftables
      apt:
        name: nftables
        state: present
      register: nft_result
      until: nft_result is succeeded
      retries: 10
      delay: 15

    - name: Enable and start nftables service
      systemd:
        name: nftables
        enabled: true
        state: started

    - name: Deploy nftables rules
      template:
        src: nftables.conf.j2
        dest: /etc/nftables.conf
        mode: "0644"
      notify: Reload nftables

    - name: Ensure /etc/nftables.d exists
      file:
        path: /etc/nftables.d
        state: directory
        mode: "0755"

    - name: Deploy sysctl config
      block:
        - name: Copy systctl config
          template:
            src: sysctl.conf.j2
            dest: /etc/sysctl.d/99-custom.conf
            mode: "0644"

        - name: Apply sysctl config
          command: sysctl --system

    - name: Reboot
      reboot:
        reboot_timeout: 3
